<testsuite name="features.bag.Bag" tests="5" errors="0" failures="0" skipped="0" time="0.332075" timestamp="2022-06-20T09:42:37.170161" hostname="legion-linux"><testcase classname="features.bag.Bag" name="Bag create with 100 quantity" status="passed" time="0.055429"><system-out>
<![CDATA[
@scenario.begin
  Scenario: Bag create with 100 quantity
    Given a set of specific parts ... passed in 0.019s
      | name  | description  | quantity |
      | partA | descriptionA | 10       |
      | partB | descriptionB | 0        |
      | partC | descriptionC | 0        |
    Given a bag type "bagtype1" with parts list of ... passed in 0.018s
      | name | part  | quantity |
      | A    | partA | 1        |
      | B    | partB | 2        |
      | C    | partC | 3        |
    Given a set of specific bags ... passed in 0.012s
      | name | kind     | quantity | complete |
      | A    | bagtype1 | 1        |          |
      | B    | bagtype1 | 2        |          |
      | C    | bagtype1 | 3        |          |
    When I create "100" "bag" of "bagtype1" kind ... passed in 0.006s
    Then I should see the "quantity" is number "100" ... passed in 0.000s

@scenario.end
--------------------------------------------------------------------------------

Captured stdout:
bagtype.data {'id': 1, 'kind': 'bagtype1'}
[OrderedDict([('id', 1), ('name', 'partA'), ('description', 'descriptionA'), ('quantity', 10)]), OrderedDict([('id', 2), ('name', 'partB'), ('description', 'descriptionB'), ('quantity', 0)]), OrderedDict([('id', 3), ('name', 'partC'), ('description', 'descriptionC'), ('quantity', 0)])]
OrderedDict([('id', 1), ('name', 'partA'), ('description', 'descriptionA'), ('quantity', 10)])
OrderedDict([('id', 1), ('name', 'partA'), ('description', 'descriptionA'), ('quantity', 10)])
OrderedDict([('id', 2), ('name', 'partB'), ('description', 'descriptionB'), ('quantity', 0)])
OrderedDict([('id', 1), ('name', 'partA'), ('description', 'descriptionA'), ('quantity', 10)])
OrderedDict([('id', 2), ('name', 'partB'), ('description', 'descriptionB'), ('quantity', 0)])
OrderedDict([('id', 3), ('name', 'partC'), ('description', 'descriptionC'), ('quantity', 0)])
OrderedDict([('id', 1), ('kind', 'bagtype1')])
OrderedDict([('id', 1), ('kind', 'bagtype1')])
OrderedDict([('id', 1), ('kind', 'bagtype1')])
OrderedDict([('id', 1), ('kind', 'bagtype1')])
{'id': 4, 'name': '', 'quantity': 100, 'complete': False, 'kind': 1}

]]>
</system-out></testcase><testcase classname="features.bag.Bag" name="Bags read" status="passed" time="0.06035"><system-out>
<![CDATA[
@scenario.begin
  Scenario: Bags read
    Given a set of specific parts ... passed in 0.013s
      | name  | description  | quantity |
      | partA | descriptionA | 10       |
      | partB | descriptionB | 0        |
      | partC | descriptionC | 0        |
    Given a bag type "bagtype1" with parts list of ... passed in 0.024s
      | name | part  | quantity |
      | A    | partA | 1        |
      | B    | partB | 2        |
      | C    | partC | 3        |
    Given a set of specific bags ... passed in 0.020s
      | name | kind     | quantity | complete |
      | A    | bagtype1 | 1        |          |
      | B    | bagtype1 | 2        |          |
      | C    | bagtype1 | 3        |          |
    When I read all "bag" ... passed in 0.003s
    Then the first item should have "name" equal to "A" ... passed in 0.000s
    And the first item should have "quantity" equal to number "1" ... passed in 0.000s
    But the last part should have "name" equal to "C" ... passed in 0.000s
    And the last part should have "quantity" equal to number "3" ... passed in 0.000s

@scenario.end
--------------------------------------------------------------------------------

Captured stdout:
bagtype.data {'id': 2, 'kind': 'bagtype1'}
[OrderedDict([('id', 4), ('name', 'partA'), ('description', 'descriptionA'), ('quantity', 10)]), OrderedDict([('id', 5), ('name', 'partB'), ('description', 'descriptionB'), ('quantity', 0)]), OrderedDict([('id', 6), ('name', 'partC'), ('description', 'descriptionC'), ('quantity', 0)])]
OrderedDict([('id', 4), ('name', 'partA'), ('description', 'descriptionA'), ('quantity', 10)])
OrderedDict([('id', 4), ('name', 'partA'), ('description', 'descriptionA'), ('quantity', 10)])
OrderedDict([('id', 5), ('name', 'partB'), ('description', 'descriptionB'), ('quantity', 0)])
OrderedDict([('id', 4), ('name', 'partA'), ('description', 'descriptionA'), ('quantity', 10)])
OrderedDict([('id', 5), ('name', 'partB'), ('description', 'descriptionB'), ('quantity', 0)])
OrderedDict([('id', 6), ('name', 'partC'), ('description', 'descriptionC'), ('quantity', 0)])
OrderedDict([('id', 2), ('kind', 'bagtype1')])
OrderedDict([('id', 2), ('kind', 'bagtype1')])
OrderedDict([('id', 2), ('kind', 'bagtype1')])
[OrderedDict([('id', 5), ('name', 'A'), ('quantity', 1), ('complete', False), ('kind', 2)]), OrderedDict([('id', 6), ('name', 'B'), ('quantity', 2), ('complete', False), ('kind', 2)]), OrderedDict([('id', 7), ('name', 'C'), ('quantity', 3), ('complete', False), ('kind', 2)])]
[OrderedDict([('id', 5), ('name', 'A'), ('quantity', 1), ('complete', False), ('kind', 2)]), OrderedDict([('id', 6), ('name', 'B'), ('quantity', 2), ('complete', False), ('kind', 2)]), OrderedDict([('id', 7), ('name', 'C'), ('quantity', 3), ('complete', False), ('kind', 2)])]
[OrderedDict([('id', 5), ('name', 'A'), ('quantity', 1), ('complete', False), ('kind', 2)]), OrderedDict([('id', 6), ('name', 'B'), ('quantity', 2), ('complete', False), ('kind', 2)]), OrderedDict([('id', 7), ('name', 'C'), ('quantity', 3), ('complete', False), ('kind', 2)])]
[OrderedDict([('id', 5), ('name', 'A'), ('quantity', 1), ('complete', False), ('kind', 2)]), OrderedDict([('id', 6), ('name', 'B'), ('quantity', 2), ('complete', False), ('kind', 2)]), OrderedDict([('id', 7), ('name', 'C'), ('quantity', 3), ('complete', False), ('kind', 2)])]

]]>
</system-out></testcase><testcase classname="features.bag.Bag" name="Single bag read" status="passed" time="0.069001"><system-out>
<![CDATA[
@scenario.begin
  Scenario: Single bag read
    Given a set of specific parts ... passed in 0.018s
      | name  | description  | quantity |
      | partA | descriptionA | 10       |
      | partB | descriptionB | 0        |
      | partC | descriptionC | 0        |
    Given a bag type "bagtype1" with parts list of ... passed in 0.025s
      | name | part  | quantity |
      | A    | partA | 1        |
      | B    | partB | 2        |
      | C    | partC | 3        |
    Given a set of specific bags ... passed in 0.018s
      | name | kind     | quantity | complete |
      | A    | bagtype1 | 1        |          |
      | B    | bagtype1 | 2        |          |
      | C    | bagtype1 | 3        |          |
    When I read the first "bag" ... passed in 0.008s
    Then I should see the "name" is "A" ... passed in 0.000s
    And I should see the "quantity" is number "1" ... passed in 0.000s

@scenario.end
--------------------------------------------------------------------------------

Captured stdout:
bagtype.data {'id': 3, 'kind': 'bagtype1'}
[OrderedDict([('id', 7), ('name', 'partA'), ('description', 'descriptionA'), ('quantity', 10)]), OrderedDict([('id', 8), ('name', 'partB'), ('description', 'descriptionB'), ('quantity', 0)]), OrderedDict([('id', 9), ('name', 'partC'), ('description', 'descriptionC'), ('quantity', 0)])]
OrderedDict([('id', 7), ('name', 'partA'), ('description', 'descriptionA'), ('quantity', 10)])
OrderedDict([('id', 7), ('name', 'partA'), ('description', 'descriptionA'), ('quantity', 10)])
OrderedDict([('id', 8), ('name', 'partB'), ('description', 'descriptionB'), ('quantity', 0)])
OrderedDict([('id', 7), ('name', 'partA'), ('description', 'descriptionA'), ('quantity', 10)])
OrderedDict([('id', 8), ('name', 'partB'), ('description', 'descriptionB'), ('quantity', 0)])
OrderedDict([('id', 9), ('name', 'partC'), ('description', 'descriptionC'), ('quantity', 0)])
OrderedDict([('id', 3), ('kind', 'bagtype1')])
OrderedDict([('id', 3), ('kind', 'bagtype1')])
OrderedDict([('id', 3), ('kind', 'bagtype1')])
{'id': 8, 'name': 'A', 'quantity': 1, 'complete': False, 'kind': 3}
{'id': 8, 'name': 'A', 'quantity': 1, 'complete': False, 'kind': 3}

]]>
</system-out></testcase><testcase classname="features.bag.Bag" name="Single part update" status="passed" time="0.077503"><system-out>
<![CDATA[
@scenario.begin
  Scenario: Single part update
    Given a set of specific parts ... passed in 0.017s
      | name  | description  | quantity |
      | partA | descriptionA | 10       |
      | partB | descriptionB | 0        |
      | partC | descriptionC | 0        |
    Given a bag type "bagtype1" with parts list of ... passed in 0.024s
      | name | part  | quantity |
      | A    | partA | 1        |
      | B    | partB | 2        |
      | C    | partC | 3        |
    Given a set of specific bags ... passed in 0.018s
      | name | kind     | quantity | complete |
      | A    | bagtype1 | 1        |          |
      | B    | bagtype1 | 2        |          |
      | C    | bagtype1 | 3        |          |
    When I update the first bag as follows ... passed in 0.013s
      | name | kind     | quantity | complete |
      | AB   | bagtype1 | 10       | X        |
    Then I should see the "name" is "AB" ... passed in 0.000s
    And I should see the "quantity" is number "10" ... passed in 0.000s
    When I read all "bag" ... passed in 0.004s
    Then the first item should have "name" equal to "AB" ... passed in 0.000s
    And the first item should have "quantity" equal to number "10" ... passed in 0.000s

@scenario.end
--------------------------------------------------------------------------------

Captured stdout:
bagtype.data {'id': 4, 'kind': 'bagtype1'}
[OrderedDict([('id', 10), ('name', 'partA'), ('description', 'descriptionA'), ('quantity', 10)]), OrderedDict([('id', 11), ('name', 'partB'), ('description', 'descriptionB'), ('quantity', 0)]), OrderedDict([('id', 12), ('name', 'partC'), ('description', 'descriptionC'), ('quantity', 0)])]
OrderedDict([('id', 10), ('name', 'partA'), ('description', 'descriptionA'), ('quantity', 10)])
OrderedDict([('id', 10), ('name', 'partA'), ('description', 'descriptionA'), ('quantity', 10)])
OrderedDict([('id', 11), ('name', 'partB'), ('description', 'descriptionB'), ('quantity', 0)])
OrderedDict([('id', 10), ('name', 'partA'), ('description', 'descriptionA'), ('quantity', 10)])
OrderedDict([('id', 11), ('name', 'partB'), ('description', 'descriptionB'), ('quantity', 0)])
OrderedDict([('id', 12), ('name', 'partC'), ('description', 'descriptionC'), ('quantity', 0)])
OrderedDict([('id', 4), ('kind', 'bagtype1')])
OrderedDict([('id', 4), ('kind', 'bagtype1')])
OrderedDict([('id', 4), ('kind', 'bagtype1')])
OrderedDict([('id', 4), ('kind', 'bagtype1')])
{'id': 11, 'name': 'AB', 'quantity': 10, 'complete': True, 'kind': 4}
{'id': 11, 'name': 'AB', 'quantity': 10, 'complete': True, 'kind': 4}
[OrderedDict([('id', 11), ('name', 'AB'), ('quantity', 10), ('complete', True), ('kind', 4)]), OrderedDict([('id', 12), ('name', 'B'), ('quantity', 2), ('complete', False), ('kind', 4)]), OrderedDict([('id', 13), ('name', 'C'), ('quantity', 3), ('complete', False), ('kind', 4)])]
[OrderedDict([('id', 11), ('name', 'AB'), ('quantity', 10), ('complete', True), ('kind', 4)]), OrderedDict([('id', 12), ('name', 'B'), ('quantity', 2), ('complete', False), ('kind', 4)]), OrderedDict([('id', 13), ('name', 'C'), ('quantity', 3), ('complete', False), ('kind', 4)])]

]]>
</system-out></testcase><testcase classname="features.bag.Bag" name="Single bag delete" status="passed" time="0.069791"><system-out>
<![CDATA[
@scenario.begin
  Scenario: Single bag delete
    Given a set of specific parts ... passed in 0.011s
      | name  | description  | quantity |
      | partA | descriptionA | 10       |
      | partB | descriptionB | 0        |
      | partC | descriptionC | 0        |
    Given a bag type "bagtype1" with parts list of ... passed in 0.027s
      | name | part  | quantity |
      | A    | partA | 1        |
      | B    | partB | 2        |
      | C    | partC | 3        |
    Given a set of specific bags ... passed in 0.020s
      | name | kind     | quantity | complete |
      | A    | bagtype1 | 1        |          |
      | B    | bagtype1 | 2        |          |
      | C    | bagtype1 | 3        |          |
    When I delete the first "bag" ... passed in 0.007s
    Then the status code should be "204" ... passed in 0.000s
    When I read all "bag" ... passed in 0.005s
    Then the first item should have "name" equal to "B" ... passed in 0.000s

@scenario.end
--------------------------------------------------------------------------------

Captured stdout:
bagtype.data {'id': 5, 'kind': 'bagtype1'}
[OrderedDict([('id', 13), ('name', 'partA'), ('description', 'descriptionA'), ('quantity', 10)]), OrderedDict([('id', 14), ('name', 'partB'), ('description', 'descriptionB'), ('quantity', 0)]), OrderedDict([('id', 15), ('name', 'partC'), ('description', 'descriptionC'), ('quantity', 0)])]
OrderedDict([('id', 13), ('name', 'partA'), ('description', 'descriptionA'), ('quantity', 10)])
OrderedDict([('id', 13), ('name', 'partA'), ('description', 'descriptionA'), ('quantity', 10)])
OrderedDict([('id', 14), ('name', 'partB'), ('description', 'descriptionB'), ('quantity', 0)])
OrderedDict([('id', 13), ('name', 'partA'), ('description', 'descriptionA'), ('quantity', 10)])
OrderedDict([('id', 14), ('name', 'partB'), ('description', 'descriptionB'), ('quantity', 0)])
OrderedDict([('id', 15), ('name', 'partC'), ('description', 'descriptionC'), ('quantity', 0)])
OrderedDict([('id', 5), ('kind', 'bagtype1')])
OrderedDict([('id', 5), ('kind', 'bagtype1')])
OrderedDict([('id', 5), ('kind', 'bagtype1')])
<Response status_code=204>
None
[OrderedDict([('id', 15), ('name', 'B'), ('quantity', 2), ('complete', False), ('kind', 5)]), OrderedDict([('id', 16), ('name', 'C'), ('quantity', 3), ('complete', False), ('kind', 5)])]

]]>
</system-out></testcase></testsuite>